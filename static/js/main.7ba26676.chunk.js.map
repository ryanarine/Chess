{"version":3,"sources":["components/images/WPawn.PNG","components/images/WRook.PNG","components/images/WBishop.PNG","components/images/WKnight.PNG","components/images/WKing.PNG","components/images/WQueen.PNG","components/images/Blank.PNG","components/images/BPawn.PNG","components/images/BRook.PNG","components/images/BBishop.PNG","components/images/BKnight.PNG","components/images/BKing.PNG","components/images/BQueen.PNG","components/Image.js","reducers/clickReducer.js","reducers/rootReducer.js","store.js","components/Tile.js","actions.js","components/Board.js","components/Title.js","App.js","index.js"],"names":["module","exports","imgMap","BPawn","BKnight","BBishop","BRook","BQueen","BKing","none","WKing","WQueen","WRook","WBishop","WKnight","WPawn","stringMap","Image","props","piece","src","name","style","display","margin","height","alt","initialState","board","row1","Array","fill","row2to5","row6","concat","initialBoard","turn","tileBg","selectedTile","highlightedTiles","shouldHighlight","piece1","piece2","parity","staysOn","tile","row","col","newRow","Math","floor","newCol","straightPath","moves","multiplier","forEach","direction","abs","highlight","push","diagonalPath","rows","cols","i","length","j","circlePath","index","clickReducer","state","action","type","newTile","possibleMoves","offset","getPossibleMoves","rootReducer","combineReducers","tiles","store","createStore","Tile","dispatch","useDispatch","useSelector","bg","border","backgroundColor","backgroundImage","onClick","getState","find","htile","move","handleClick","backgrounds","Board","map","key","className","modeMap","colorMap","Title","id","color","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.7ba26676.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/WPawn.4e0550ce.PNG\";","module.exports = __webpack_public_path__ + \"static/media/WRook.e4dd7145.PNG\";","module.exports = __webpack_public_path__ + \"static/media/WBishop.b95eba4f.PNG\";","module.exports = __webpack_public_path__ + \"static/media/WKnight.a1d5ea38.PNG\";","module.exports = __webpack_public_path__ + \"static/media/WKing.c087e4bc.PNG\";","module.exports = __webpack_public_path__ + \"static/media/WQueen.678f5a77.PNG\";","module.exports = __webpack_public_path__ + \"static/media/Blank.37b0d687.PNG\";","module.exports = __webpack_public_path__ + \"static/media/BPawn.b5108f54.PNG\";","module.exports = __webpack_public_path__ + \"static/media/BRook.3c507f6a.PNG\";","module.exports = __webpack_public_path__ + \"static/media/BBishop.8ab4c876.PNG\";","module.exports = __webpack_public_path__ + \"static/media/BKnight.95ada093.PNG\";","module.exports = __webpack_public_path__ + \"static/media/BKing.7e884537.PNG\";","module.exports = __webpack_public_path__ + \"static/media/BQueen.73e7dc3b.PNG\";","import React from \"react\";\r\nimport WPawn from \"./images/WPawn.PNG\";\r\nimport WRook from \"./images/WRook.PNG\";\r\nimport WBishop from \"./images/WBishop.PNG\";\r\nimport WKnight from \"./images/WKnight.PNG\";\r\nimport WKing from \"./images/WKing.PNG\";\r\nimport WQueen from \"./images/WQueen.PNG\";\r\nimport none from \"./images/Blank.PNG\";\r\nimport BPawn from \"./images/BPawn.PNG\";\r\nimport BRook from \"./images/BRook.PNG\";\r\nimport BBishop from \"./images/BBishop.PNG\";\r\nimport BKnight from \"./images/BKnight.PNG\";\r\nimport BKing from \"./images/BKing.PNG\";\r\nimport BQueen from \"./images/BQueen.PNG\";\r\n\r\nconst imgMap = [\r\n  BPawn,\r\n  BKnight,\r\n  BBishop,\r\n  BRook,\r\n  BQueen,\r\n  BKing,\r\n  none,\r\n  WKing,\r\n  WQueen,\r\n  WRook,\r\n  WBishop,\r\n  WKnight,\r\n  WPawn\r\n];\r\n\r\nconst stringMap = [\r\n  \"Black Pawn\",\r\n  \"Black Knight\",\r\n  \"Black Bishop\",\r\n  \"Black Rook\",\r\n  \"Black Queen\",\r\n  \"Black King\",\r\n  \"Blank\",\r\n  \"White King\",\r\n  \"White Queen\",\r\n  \"White Rook\",\r\n  \"White Bishop\",\r\n  \"White Knight\",\r\n  \"White Pawn\"\r\n];\r\n\r\nfunction getImg(piece) {\r\n  return imgMap[piece + 6];\r\n}\r\n\r\nfunction Image(props) {\r\n  const imgStyle = {\r\n    display: \"block\",\r\n    margin: \"auto\",\r\n    height: \"100%\"\r\n  };\r\n  return <img src={getImg(props.name)} style={imgStyle} alt={stringMap[props.name + 6]} />;\r\n}\r\n\r\nexport default Image;\r\n","// The board is represented as a 64 tile array\r\n// each entry is an integer representing the piece on the tile\r\n// 0 = blank tile 1,2 = King,Queen 3,4,5 = Rook,Bishop,Knight 6 = Pawn\r\n// Negative numbers mean the piece is black\r\nfunction initialBoard() {\r\n  const row0 = [-3, -4, -5, -2, -1, -5, -4, -3];\r\n  const row1 = new Array(8).fill(-6);\r\n  const row2to5 = new Array(32).fill(0);\r\n  const row6 = new Array(8).fill(6);\r\n  const row7 = [3, 4, 5, 2, 1, 5, 4, 3];\r\n  return row0.concat(row1, row2to5, row6, row7);\r\n}\r\n\r\nconst initialState = {\r\n  board: initialBoard(),\r\n  turn: true, // Whose turn is it? true = White false = Black\r\n  tileBg: new Array(64).fill(0), // The background color of each tile\r\n  // The tile holding the piece that the player wants to move\r\n  // The background color of the selected tile must be green\r\n  selectedTile: -1,\r\n  // The tiles that the selected piece can potentially move to\r\n  // The background colors of these tiles must be blue or red\r\n  // or the default color if the piece cannot move there because\r\n  // an ally piece is occupying it\r\n  highlightedTiles: []\r\n};\r\n\r\nfunction clickReducer(state = initialState, action) {\r\n  if (action.type === \"UNHIGHLIGHT\" || action.type === \"MOVE\") {\r\n    if (action.type === \"MOVE\") {\r\n      // Move piece to new tile and clear out old tile\r\n      state.board[action.newTile] = state.board[state.selectedTile];\r\n      state.board[state.selectedTile] = 0;\r\n      state.turn = !state.turn;\r\n    }\r\n    // Unhighlight any highlighted tiles and reset values\r\n    state.tileBg[state.selectedTile] = 0;\r\n    state.highlightedTiles.forEach(tile => (state.tileBg[tile] = 0));\r\n    state.selectedTile = -1;\r\n    state.highlightedTiles = [];\r\n  } else if (action.type === \"HIGHLIGHT\") {\r\n    if (state.selectedTile !== -1) {\r\n      //Unhighlight previous highlighted tiles\r\n      state.tileBg[state.selectedTile] = 0;\r\n      state.highlightedTiles.forEach(tile => (state.tileBg[tile] = 0));\r\n    }\r\n    // Highlight the selected tile\r\n    state.selectedTile = action.tile;\r\n    state.tileBg[action.tile] = 1;\r\n    // Highlight any tiles that the piece can move to\r\n    state.highlightedTiles = getPossibleMoves(action.tile, action.piece, state.board);\r\n    state.highlightedTiles.forEach(tile => {\r\n      // determine the highlight color\r\n      state.tileBg[tile] = shouldHighlight(state.board[action.tile], state.board[tile]);\r\n    });\r\n  }\r\n  return state;\r\n}\r\n\r\nfunction getPossibleMoves(tile, piece, board) {\r\n  let rows = [];\r\n  let cols = [];\r\n  // Pawn\r\n  switch (Math.abs(piece)) {\r\n    case 6:\r\n      let moves = [];\r\n      let multiplier = piece === -6 ? 1 : -1;\r\n      // First deal with forward movements\r\n      let possibleMoves = [multiplier];\r\n      // If pawn is on second or seventh row add extra move (initial position)\r\n      if (\r\n        (piece === 6 && Math.floor(tile / 8) === 6) ||\r\n        (piece === -6 && Math.floor(tile / 8) === 1)\r\n      ) {\r\n        possibleMoves.push(2 * multiplier);\r\n      }\r\n      // Push the move if there is an empty tile in front\r\n      for (let i = 0; i < possibleMoves.length; i++) {\r\n        if (\r\n          staysOn(tile, possibleMoves[i], 0) &&\r\n          shouldHighlight(piece, board[tile + 8 * possibleMoves[i]]) === 2\r\n        ) {\r\n          moves.push(tile + 8 * possibleMoves[i]);\r\n        } else {\r\n          break; // Break early because the Pawn is blocked from moving forward\r\n        }\r\n      }\r\n\r\n      // Now deal with diagonal movements\r\n      let diagonalOffsets = [-1, 1];\r\n      diagonalOffsets.forEach(offset => {\r\n        // Push the move if there is an enemy\r\n        if (\r\n          staysOn(tile, multiplier, offset) &&\r\n          shouldHighlight(piece, board[tile + 8 * multiplier + offset]) === 3\r\n        ) {\r\n          moves.push(tile + 8 * multiplier + offset);\r\n        }\r\n      });\r\n      return moves;\r\n\r\n    case 5:\r\n      rows = [-2, -2, -1, 1, 2, 2, 1, -1];\r\n      cols = [-1, 1, 2, 2, 1, -1, -2, -2];\r\n      return circlePath(tile, rows, cols);\r\n\r\n    case 4:\r\n      return diagonalPath(tile, piece, board);\r\n\r\n    case 3:\r\n      return straightPath(tile, piece, board);\r\n\r\n    case 2:\r\n      return straightPath(tile, piece, board).concat(diagonalPath(tile, piece, board));\r\n\r\n    case 1:\r\n      rows = [-1, -1, 0, 1, 1, 1, 0, -1, -1];\r\n      cols = [0, 1, 1, 1, 0, -1, -1, -1, -1];\r\n      return circlePath(tile, rows, cols);\r\n\r\n    default:\r\n      return [];\r\n  }\r\n}\r\n\r\n// Finds the relationship between the two pieces and returns an integer indicating what color should piece2 be highlighted as\r\n// 0 = Ally => No highlight\r\n// 2 = Neutral/Blank tile => Blue highlight\r\n// 3 = Enemy => Red highlight\r\nfunction shouldHighlight(piece1, piece2) {\r\n  let parity = piece1 * piece2;\r\n  return parity === 0 ? 2 : parity < 0 ? 3 : 0;\r\n}\r\n\r\n// Returns true if moving the tile by the given row and col adjustment will not cause the tile to fall off the board\r\nfunction staysOn(tile, row, col) {\r\n  let newRow = Math.floor(tile / 8) + row;\r\n  let newCol = (tile % 8) + col;\r\n  return newRow >= 0 && newRow < 8 && newCol >= 0 && newCol < 8;\r\n}\r\n\r\n// Used for the Rook and Queen\r\nfunction straightPath(tile, piece, board) {\r\n  let moves = [];\r\n  let multiplier = 1;\r\n  let row = 0;\r\n  let col = 0;\r\n  [8, -8, 1, -1].forEach(direction => {\r\n    multiplier = 1;\r\n    if (Math.abs(direction) === 8) {\r\n      row = direction / 8;\r\n      col = 0;\r\n    } else if (Math.abs(direction) === 1) {\r\n      row = 0;\r\n      col = direction;\r\n    }\r\n    while (staysOn(tile, row * multiplier, col * multiplier)) {\r\n      let highlight = shouldHighlight(piece, board[tile + direction * multiplier]);\r\n      // If ally is blocking path, don't add the move and stop moving in this direction\r\n      if (highlight === 0) {\r\n        break;\r\n      }\r\n      // Add the move and if enemy is blocking path, stop moving in this direction\r\n      moves.push(tile + direction * multiplier);\r\n      if (highlight === 3) {\r\n        break;\r\n      }\r\n      multiplier++;\r\n    }\r\n  });\r\n  return moves;\r\n}\r\n\r\n// Used for the Bishop and Queen\r\nfunction diagonalPath(tile, piece, board) {\r\n  let moves = [];\r\n  let multiplier = 1;\r\n  let rows = [-8, 8];\r\n  let cols = [-1, 1];\r\n  for (let i = 0; i < rows.length; i++) {\r\n    for (let j = 0; j < cols.length; j++) {\r\n      // rows[i] and cols[j] determine direction, multiplier determines how far to move\r\n      multiplier = 1;\r\n      // Advance in direction while we are on the board and nothing is blocking the path\r\n      while (staysOn(tile, (rows[i] / 8) * multiplier, cols[j] * multiplier)) {\r\n        let highlight = shouldHighlight(piece, board[tile + (rows[i] + cols[j]) * multiplier]);\r\n        // If ally is blocking path, don't add the move and stop moving in this direction\r\n        if (highlight === 0) {\r\n          break;\r\n        }\r\n        // Add the move and if enemy is blocking path, stop moving in this direction\r\n        moves.push(tile + (rows[i] + cols[j]) * multiplier);\r\n        if (highlight === 3) {\r\n          break;\r\n        }\r\n        multiplier++;\r\n      }\r\n    }\r\n  }\r\n  return moves;\r\n}\r\n\r\n// Used for the Knight and King\r\n// The rows and columns given simulate a circular path going clockwise from a zero degree bearing\r\nfunction circlePath(tile, rows, cols) {\r\n  let moves = [];\r\n  rows.forEach((row, index) => {\r\n    if (staysOn(tile, row, cols[index])) {\r\n      moves.push(tile + 8 * row + cols[index]);\r\n    }\r\n  });\r\n  return moves;\r\n}\r\n\r\nexport default clickReducer;\r\n","import { combineReducers } from \"redux\";\r\nimport clickReducer from \"./clickReducer\";\r\n\r\nconst rootReducer = combineReducers({ tiles: clickReducer });\r\n\r\nexport default rootReducer;\r\n","import { createStore } from \"redux\";\r\nimport rootReducer from \"./reducers/rootReducer\";\r\n\r\nlet store = createStore(rootReducer);\r\n\r\nexport default store;\r\n","import React from \"react\";\r\nimport Image from \"./Image\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { highlight, unHighlight, move } from \"../actions\";\r\nimport store from \"../store\";\r\n\r\nfunction handleClick(tile, piece, dispatch) {\r\n  let turn = store.getState(\"tiles\").tiles.turn;\r\n  if ((turn && piece > 0) || (!turn && piece < 0)) {\r\n    dispatch(highlight(tile, piece));\r\n    return;\r\n  }\r\n  let highlightedTiles = store.getState(\"tiles\").tiles.highlightedTiles;\r\n  let selectedTile = store.getState(\"tiles\").tiles.selectedTile;\r\n  // Check if the player selected a piece and the piece can move to the clicked tile\r\n  if (selectedTile !== -1 && highlightedTiles.find(htile => htile === tile) >= 0) {\r\n    dispatch(move(tile, piece));\r\n    return;\r\n  }\r\n  dispatch(unHighlight());\r\n}\r\n\r\nfunction Tile(props) {\r\n  const dispatch = useDispatch();\r\n  const name = useSelector(state => state.tiles.board[props.tile]);\r\n  const bg = useSelector(state => state.tiles.tileBg[props.tile]);\r\n  const style = {\r\n    border: \"2px solid #666\",\r\n    backgroundColor: props.bg,\r\n    backgroundImage: \"none\",\r\n    height: \"80px\"\r\n  };\r\n\r\n  if (bg === 1) {\r\n    style.backgroundColor = \"#90f694\";\r\n    style.backgroundImage = \"radial-gradient(lime, green)\";\r\n  } else if (bg === 2) {\r\n    style.backgroundColor = \"#5ba8e6\";\r\n    style.backgroundImage = \"radial-gradient(blue, darkblue)\";\r\n  } else if (bg === 3) {\r\n    style.backgroundColor = \"#db1010\";\r\n    style.backgroundImage = \"radial-gradient(red, darkred)\";\r\n  }\r\n  return (\r\n    <div style={style} onClick={() => handleClick(props.tile, name, dispatch)}>\r\n      <Image name={name} />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Tile;\r\n","export function highlight(tile, piece) {\r\n  return { type: \"HIGHLIGHT\", tile, piece };\r\n}\r\n\r\nexport function unHighlight() {\r\n  return { type: \"UNHIGHLIGHT\" };\r\n}\r\n\r\nexport function move(newTile, piece) {\r\n  return { type: \"MOVE\", newTile, piece };\r\n}\r\n","import React from \"react\";\r\nimport Tile from \"./Tile\";\r\nimport { useSelector } from \"react-redux\";\r\n\r\nfunction initialBoard() {\r\n  const row0 = [-3, -4, -5, -2, -1, -5, -4, -3];\r\n  const row1 = new Array(8).fill(-6);\r\n  const row2to5 = new Array(32).fill(0);\r\n  const row6 = new Array(8).fill(6);\r\n  const row7 = [3, 4, 5, 2, 1, 5, 4, 3];\r\n  return row0.concat(row1, row2to5, row6, row7);\r\n}\r\n\r\nconst backgrounds = [\"white\", \"black\"];\r\n\r\ninitialBoard();\r\nfunction Board() {\r\n  const board = useSelector(state => state.tiles.board);\r\n\r\n  const tiles = board.map((piece, index) => (\r\n    <Tile key={index} tile={index} bg={backgrounds[index % 2]} />\r\n  ));\r\n  return <div className={\"board\"}>{tiles}</div>;\r\n}\r\n\r\nexport default Board;\r\n","import React from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\n\r\nconst modeMap = [\"White's Turn\", [\"Black's Turn\"]];\r\nconst colorMap = [\"white\", \"black\"];\r\n\r\nfunction Title() {\r\n  let turn = useSelector(state => state.tiles.turn);\r\n  let index = turn ? 0 : 1;\r\n  return (\r\n    <h1 id=\"title\" style={{ color: colorMap[index] }}>\r\n      {modeMap[index]}\r\n    </h1>\r\n  );\r\n}\r\n\r\nexport default Title;\r\n","import React from \"react\";\nimport \"./main.css\";\nimport Board from \"./components/Board\";\nimport Title from \"./components/Title\";\n\nfunction App() {\n  return (\n    <div>\n      <Title />\n      <Board />\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport { Provider } from \"react-redux\";\nimport store from \"./store\";\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}