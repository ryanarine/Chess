{"version":3,"sources":["components/images/WPawn.PNG","components/images/WRook.PNG","components/images/WBishop.PNG","components/images/WKnight.PNG","components/images/WKing.PNG","components/images/WQueen.PNG","components/images/Blank.PNG","components/images/BPawn.PNG","components/images/BRook.PNG","components/images/BBishop.PNG","components/images/BKnight.PNG","components/images/BKing.PNG","components/images/BQueen.PNG","components/Image.js","reducers/clickReducer.js","reducers/rootReducer.js","store.js","components/Tile.js","actions.js","components/Board.js","components/Title.js","App.js","index.js"],"names":["module","exports","imgMap","BPawn","BKnight","BBishop","BRook","BQueen","BKing","none","WKing","WQueen","WRook","WBishop","WKnight","WPawn","stringMap","Image","props","piece","src","name","style","display","margin","height","alt","initialState","board","row1","Array","fill","row2to5","row6","concat","initialBoard","turn","tileBg","selectedTile","highlightedTiles","shouldHighlight","piece1","piece2","console","log","parity","clickReducer","state","action","type","newTile","forEach","tile","moves","Math","abs","multiplier","possiblemoves","floor","push","i","length","move","cols","row","index","col","newRow","newCol","staysOn","filter","getPossibleMoves","rootReducer","combineReducers","tiles","store","createStore","Tile","dispatch","useDispatch","useSelector","bg","border","backgroundColor","backgroundImage","onClick","getState","highlight","find","htile","handleClick","backgrounds","Board","map","key","className","modeMap","colorMap","Title","id","color","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.73ddada5.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/WPawn.4e0550ce.PNG\";","module.exports = __webpack_public_path__ + \"static/media/WRook.e4dd7145.PNG\";","module.exports = __webpack_public_path__ + \"static/media/WBishop.b95eba4f.PNG\";","module.exports = __webpack_public_path__ + \"static/media/WKnight.a1d5ea38.PNG\";","module.exports = __webpack_public_path__ + \"static/media/WKing.c087e4bc.PNG\";","module.exports = __webpack_public_path__ + \"static/media/WQueen.678f5a77.PNG\";","module.exports = __webpack_public_path__ + \"static/media/Blank.37b0d687.PNG\";","module.exports = __webpack_public_path__ + \"static/media/BPawn.b5108f54.PNG\";","module.exports = __webpack_public_path__ + \"static/media/BRook.3c507f6a.PNG\";","module.exports = __webpack_public_path__ + \"static/media/BBishop.8ab4c876.PNG\";","module.exports = __webpack_public_path__ + \"static/media/BKnight.95ada093.PNG\";","module.exports = __webpack_public_path__ + \"static/media/BKing.7e884537.PNG\";","module.exports = __webpack_public_path__ + \"static/media/BQueen.73e7dc3b.PNG\";","import React from \"react\";\r\nimport WPawn from \"./images/WPawn.PNG\";\r\nimport WRook from \"./images/WRook.PNG\";\r\nimport WBishop from \"./images/WBishop.PNG\";\r\nimport WKnight from \"./images/WKnight.PNG\";\r\nimport WKing from \"./images/WKing.PNG\";\r\nimport WQueen from \"./images/WQueen.PNG\";\r\nimport none from \"./images/Blank.PNG\";\r\nimport BPawn from \"./images/BPawn.PNG\";\r\nimport BRook from \"./images/BRook.PNG\";\r\nimport BBishop from \"./images/BBishop.PNG\";\r\nimport BKnight from \"./images/BKnight.PNG\";\r\nimport BKing from \"./images/BKing.PNG\";\r\nimport BQueen from \"./images/BQueen.PNG\";\r\n\r\nconst imgMap = [\r\n  BPawn,\r\n  BKnight,\r\n  BBishop,\r\n  BRook,\r\n  BQueen,\r\n  BKing,\r\n  none,\r\n  WKing,\r\n  WQueen,\r\n  WRook,\r\n  WBishop,\r\n  WKnight,\r\n  WPawn\r\n];\r\n\r\nconst stringMap = [\r\n  \"Black Pawn\",\r\n  \"Black Knight\",\r\n  \"Black Bishop\",\r\n  \"Black Rook\",\r\n  \"Black Queen\",\r\n  \"Black King\",\r\n  \"Blank\",\r\n  \"White King\",\r\n  \"White Queen\",\r\n  \"White Rook\",\r\n  \"White Bishop\",\r\n  \"White Knight\",\r\n  \"White Pawn\"\r\n];\r\n\r\nfunction getImg(piece) {\r\n  return imgMap[piece + 6];\r\n}\r\n\r\nfunction Image(props) {\r\n  const imgStyle = {\r\n    display: \"block\",\r\n    margin: \"auto\",\r\n    height: \"100%\"\r\n  };\r\n  return <img src={getImg(props.name)} style={imgStyle} alt={stringMap[props.name + 6]} />;\r\n}\r\n\r\nexport default Image;\r\n","// The board is represented as a 64 tile array\r\n// each entry is an integer representing the piece on the tile\r\n// 0 = blank tile 1,2 = King,Queen 3,4,5 = Rook,Bishop,Knight 6 = Pawn\r\n// Negative numbers mean the piece is black\r\nfunction initialBoard() {\r\n  const row0 = [-3, -4, -5, -2, -1, -5, -4, -3];\r\n  const row1 = new Array(8).fill(-6);\r\n  const row2to5 = new Array(32).fill(0);\r\n  const row6 = new Array(8).fill(6);\r\n  const row7 = [3, 4, 5, 2, 1, 5, 4, 3];\r\n  return row0.concat(row1, row2to5, row6, row7);\r\n}\r\n\r\nconst initialState = {\r\n  board: initialBoard(),\r\n  turn: true, // Whose turn is it? true = White false = Black\r\n  tileBg: new Array(64).fill(0), // The background color of each tile\r\n  // The tile holding the piece that the player wants to move\r\n  // The background color of the selected tile must be green\r\n  selectedTile: -1,\r\n  // The tiles that the selected piece can potentially move to\r\n  // The background colors of these tiles must be blue or red\r\n  // or the default color if the piece cannot move there because\r\n  // an ally piece is occupying it\r\n  highlightedTiles: []\r\n};\r\n\r\nfunction clickReducer(state = initialState, action) {\r\n  if (action.type === \"UNHIGHLIGHT\" || action.type === \"MOVE\") {\r\n    if (action.type === \"MOVE\") {\r\n      // Move piece to new tile and clear out old tile\r\n      state.board[action.newTile] = state.board[state.selectedTile];\r\n      state.board[state.selectedTile] = 0;\r\n      state.turn = !state.turn;\r\n    }\r\n    // Unhighlight any highlighted tiles and reset values\r\n    state.tileBg[state.selectedTile] = 0;\r\n    state.highlightedTiles.forEach(tile => (state.tileBg[tile] = 0));\r\n    state.selectedTile = -1;\r\n    state.highlightedTiles = [];\r\n  } else if (action.type === \"HIGHLIGHT\") {\r\n    if (state.selectedTile !== -1) {\r\n      //Unhighlight previous highlighted tiles\r\n      state.tileBg[state.selectedTile] = 0;\r\n      state.highlightedTiles.forEach(tile => (state.tileBg[tile] = 0));\r\n    }\r\n    // Highlight the selected tile\r\n    state.selectedTile = action.tile;\r\n    state.tileBg[action.tile] = 1;\r\n    // Highlight any tiles that the piece can move to\r\n    state.highlightedTiles = getPossibleMoves(action.tile, action.piece, state.board);\r\n    state.highlightedTiles.forEach(tile => {\r\n      // determine the highlight color\r\n      state.tileBg[tile] = shouldHighlight(state.board[action.tile], state.board[tile]);\r\n    });\r\n  }\r\n  return state;\r\n}\r\n\r\nfunction getPossibleMoves(tile, piece, board) {\r\n  let moves = [];\r\n  // Pawn\r\n  switch (Math.abs(piece)) {\r\n    case 6:\r\n      let multiplier = piece === -6 ? 1 : -1;\r\n      let possiblemoves = [tile + 8 * multiplier];\r\n      // If pawn is on second or seventh row add extra move (initial position)\r\n      if (\r\n        (piece === 6 && Math.floor(tile / 8) === 6) ||\r\n        (piece === -6 && Math.floor(tile / 8) === 1)\r\n      ) {\r\n        possiblemoves.push(tile + 16 * multiplier);\r\n      }\r\n      // Push the move if the highlight color matches the expected highlight\r\n      for (let i = 0; i < possiblemoves.length; i++) {\r\n        if (shouldHighlight(piece, board[possiblemoves[i]]) === 2) {\r\n          moves.push(possiblemoves[i]);\r\n        } else {\r\n          break; // Break early because the Pawn is blocked from moving forward\r\n        }\r\n      }\r\n      possiblemoves = [tile + 7 * multiplier, tile + 9 * multiplier];\r\n      possiblemoves.forEach(move => {\r\n        // Check for enemy\r\n        if (shouldHighlight(piece, board[move]) === 3) {\r\n          moves.push(move);\r\n        }\r\n      });\r\n      break;\r\n\r\n    case 5:\r\n      let rows = [-2, -2, -1, 1, 2, 2, 1, -1];\r\n      let cols = [-1, 1, 2, 2, 1, -1, -2, -2];\r\n      rows.forEach((row, index) => {\r\n        if (staysOn(tile, row, cols[index])) {\r\n          moves.push(tile + 8 * row + cols[index]);\r\n        }\r\n      });\r\n      break;\r\n    default:\r\n      return piece < 0 ? [(tile + 8) % 64] : [(tile + 56) % 64];\r\n  }\r\n  return moves.filter(move => move >= 0 && move < 64);\r\n}\r\n\r\n// Finds the relationship between the two pieces and returns an integer indicating what color should piece2 be highlighted as\r\n// 0 = Ally => No highlight\r\n// 2 = Neutral/Blank tile => Blue highlight\r\n// 3 = Enemy => Red highlight\r\nfunction shouldHighlight(piece1, piece2) {\r\n  console.log(piece1, piece2);\r\n  let parity = piece1 * piece2;\r\n  return parity === 0 ? 2 : parity < 0 ? 3 : 0;\r\n}\r\n\r\n// Returns true if moving the tile by the given row and col adjustment will not cause the tile to fall off the board\r\nfunction staysOn(tile, row, col) {\r\n  let newRow = Math.floor(tile / 8) + row;\r\n  let newCol = (tile % 8) + col;\r\n  return newRow >= 0 && newRow < 8 && newCol >= 0 && newRow < 8;\r\n}\r\n\r\nexport default clickReducer;\r\n","import { combineReducers } from \"redux\";\r\nimport clickReducer from \"./clickReducer\";\r\n\r\nconst rootReducer = combineReducers({ tiles: clickReducer });\r\n\r\nexport default rootReducer;\r\n","import { createStore } from \"redux\";\r\nimport rootReducer from \"./reducers/rootReducer\";\r\n\r\nlet store = createStore(rootReducer);\r\n\r\nexport default store;\r\n","import React from \"react\";\r\nimport Image from \"./Image\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { highlight, unHighlight, move } from \"../actions\";\r\nimport store from \"../store\";\r\n\r\nfunction handleClick(tile, piece, dispatch) {\r\n  let turn = store.getState(\"tiles\").tiles.turn;\r\n  if ((turn && piece > 0) || (!turn && piece < 0)) {\r\n    dispatch(highlight(tile, piece));\r\n    return;\r\n  }\r\n  let highlightedTiles = store.getState(\"tiles\").tiles.highlightedTiles;\r\n  let selectedTile = store.getState(\"tiles\").tiles.selectedTile;\r\n  // Check if the player selected a piece and the piece can move to the clicked tile\r\n  if (selectedTile !== -1 && highlightedTiles.find(htile => htile === tile) >= 0) {\r\n    dispatch(move(tile, piece));\r\n    return;\r\n  }\r\n  dispatch(unHighlight());\r\n}\r\n\r\nfunction Tile(props) {\r\n  const dispatch = useDispatch();\r\n  const name = useSelector(state => state.tiles.board[props.tile]);\r\n  const bg = useSelector(state => state.tiles.tileBg[props.tile]);\r\n  const style = {\r\n    border: \"2px solid #666\",\r\n    backgroundColor: props.bg,\r\n    backgroundImage: \"none\",\r\n    height: \"80px\"\r\n  };\r\n\r\n  if (bg === 1) {\r\n    style.backgroundColor = \"#90f694\";\r\n    style.backgroundImage = \"radial-gradient(lime, green)\";\r\n  } else if (bg === 2) {\r\n    style.backgroundColor = \"#5ba8e6\";\r\n    style.backgroundImage = \"radial-gradient(blue, darkblue)\";\r\n  } else if (bg === 3) {\r\n    style.backgroundColor = \"#db1010\";\r\n    style.backgroundImage = \"radial-gradient(red, darkred)\";\r\n  }\r\n  return (\r\n    <div style={style} onClick={() => handleClick(props.tile, name, dispatch)}>\r\n      <Image name={name} />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Tile;\r\n","export function highlight(tile, piece) {\r\n  return { type: \"HIGHLIGHT\", tile, piece };\r\n}\r\n\r\nexport function unHighlight() {\r\n  return { type: \"UNHIGHLIGHT\" };\r\n}\r\n\r\nexport function move(newTile, piece) {\r\n  return { type: \"MOVE\", newTile, piece };\r\n}\r\n","import React from \"react\";\r\nimport Tile from \"./Tile\";\r\nimport { useSelector } from \"react-redux\";\r\n\r\nfunction initialBoard() {\r\n  const row0 = [-3, -4, -5, -2, -1, -5, -4, -3];\r\n  const row1 = new Array(8).fill(-6);\r\n  const row2to5 = new Array(32).fill(0);\r\n  const row6 = new Array(8).fill(6);\r\n  const row7 = [3, 4, 5, 2, 1, 5, 4, 3];\r\n  return row0.concat(row1, row2to5, row6, row7);\r\n}\r\n\r\nconst backgrounds = [\"white\", \"black\"];\r\n\r\ninitialBoard();\r\nfunction Board() {\r\n  const board = useSelector(state => state.tiles.board);\r\n\r\n  const tiles = board.map((piece, index) => (\r\n    <Tile key={index} tile={index} bg={backgrounds[index % 2]} />\r\n  ));\r\n  return <div className={\"board\"}>{tiles}</div>;\r\n}\r\n\r\nexport default Board;\r\n","import React from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\n\r\nconst modeMap = [\"White's Turn\", [\"Black's Turn\"]];\r\nconst colorMap = [\"white\", \"black\"];\r\n\r\nfunction Title() {\r\n  let turn = useSelector(state => state.tiles.turn);\r\n  let index = turn ? 0 : 1;\r\n  return (\r\n    <h1 id=\"title\" style={{ color: colorMap[index] }}>\r\n      {modeMap[index]}\r\n    </h1>\r\n  );\r\n}\r\n\r\nexport default Title;\r\n","import React from \"react\";\nimport \"./main.css\";\nimport Board from \"./components/Board\";\nimport Title from \"./components/Title\";\n\nfunction App() {\n  return (\n    <div>\n      <Title />\n      <Board />\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport { Provider } from \"react-redux\";\nimport store from \"./store\";\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}