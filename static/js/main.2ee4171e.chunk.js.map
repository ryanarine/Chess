{"version":3,"sources":["components/images/WPawn.PNG","components/images/WRook.PNG","components/images/WBishop.PNG","components/images/WKnight.PNG","components/images/WKing.PNG","components/images/WQueen.PNG","components/images/BPawn.PNG","components/images/BRook.PNG","components/images/BBishop.PNG","components/images/BKnight.PNG","components/images/BKing.PNG","components/images/BQueen.PNG","components/Image.js","actions.js","chessReducer.js","store.js","components/Tile.js","components/Board.js","components/Title.js","components/WhiteWins.js","components/BlackWins.js","components/Header.js","components/PromotionForm.js","App.js","index.js"],"names":["module","exports","imgMap","BPawn","BKnight","BBishop","BRook","BQueen","BKing","WKing","WQueen","WRook","WBishop","WKnight","WPawn","stringMap","Image","props","piece","name","Fragment","src","style","display","margin","height","alt","win","didWhiteWin","type","initialBoard","row1","Array","fill","row2to5","row6","concat","getInitialState","WWins","BWins","board","turn","tileBg","selectedTile","highlightedTiles","gameOver","promotedTile","whiteWins","blackWins","shouldHighlight","piece1","piece2","parity","staysOn","tile","row","col","newRow","Math","floor","newCol","straightPath","moves","multiplier","forEach","direction","abs","highlight","push","diagonalPath","rows","cols","i","length","j","circlePath","index","chessReducer","state","action","newTile","possibleMoves","offset","getPossibleMoves","store","createStore","Tile","dispatch","useDispatch","useSelector","bg","backgroundColor","backgroundImage","className","onClick","getState","find","htile","move","sendPromote","handleClick","getBg","backgrounds","Board","tiles","map","key","id","modeMap","colorMap","Title","color","WhiteWins","BlackWins","Header","sendReset","PromotionForm","onSubmit","e","event","preventDefault","Number","target","elements","promotion","value","required","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.2ee4171e.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/WPawn.4e0550ce.PNG\";","module.exports = __webpack_public_path__ + \"static/media/WRook.e4dd7145.PNG\";","module.exports = __webpack_public_path__ + \"static/media/WBishop.b95eba4f.PNG\";","module.exports = __webpack_public_path__ + \"static/media/WKnight.a1d5ea38.PNG\";","module.exports = __webpack_public_path__ + \"static/media/WKing.c087e4bc.PNG\";","module.exports = __webpack_public_path__ + \"static/media/WQueen.678f5a77.PNG\";","module.exports = __webpack_public_path__ + \"static/media/BPawn.b5108f54.PNG\";","module.exports = __webpack_public_path__ + \"static/media/BRook.3c507f6a.PNG\";","module.exports = __webpack_public_path__ + \"static/media/BBishop.8ab4c876.PNG\";","module.exports = __webpack_public_path__ + \"static/media/BKnight.95ada093.PNG\";","module.exports = __webpack_public_path__ + \"static/media/BKing.7e884537.PNG\";","module.exports = __webpack_public_path__ + \"static/media/BQueen.73e7dc3b.PNG\";","import React from \"react\";\r\nimport WPawn from \"./images/WPawn.PNG\";\r\nimport WRook from \"./images/WRook.PNG\";\r\nimport WBishop from \"./images/WBishop.PNG\";\r\nimport WKnight from \"./images/WKnight.PNG\";\r\nimport WKing from \"./images/WKing.PNG\";\r\nimport WQueen from \"./images/WQueen.PNG\";\r\nimport BPawn from \"./images/BPawn.PNG\";\r\nimport BRook from \"./images/BRook.PNG\";\r\nimport BBishop from \"./images/BBishop.PNG\";\r\nimport BKnight from \"./images/BKnight.PNG\";\r\nimport BKing from \"./images/BKing.PNG\";\r\nimport BQueen from \"./images/BQueen.PNG\";\r\n\r\nconst imgMap = [\r\n  BPawn,\r\n  BKnight,\r\n  BBishop,\r\n  BRook,\r\n  BQueen,\r\n  BKing,\r\n  \"\",\r\n  WKing,\r\n  WQueen,\r\n  WRook,\r\n  WBishop,\r\n  WKnight,\r\n  WPawn\r\n];\r\n\r\nconst stringMap = [\r\n  \"Black Pawn\",\r\n  \"Black Knight\",\r\n  \"Black Bishop\",\r\n  \"Black Rook\",\r\n  \"Black Queen\",\r\n  \"Black King\",\r\n  \"Blank\",\r\n  \"White King\",\r\n  \"White Queen\",\r\n  \"White Rook\",\r\n  \"White Bishop\",\r\n  \"White Knight\",\r\n  \"White Pawn\"\r\n];\r\n\r\nfunction getImg(piece) {\r\n  return imgMap[piece + 6];\r\n}\r\n\r\nfunction Image(props) {\r\n  const imgStyle = {\r\n    display: \"block\",\r\n    margin: \"auto\",\r\n    height: \"100%\"\r\n  };\r\n  if (props.name === 0) {\r\n    return <React.Fragment></React.Fragment>;\r\n  }\r\n  return <img src={getImg(props.name)} style={imgStyle} alt={stringMap[props.name + 6]} />;\r\n}\r\n\r\nexport default Image;\r\n","export function highlight(tile, piece) {\r\n  return { type: \"HIGHLIGHT\", tile, piece };\r\n}\r\n\r\nexport function unHighlight() {\r\n  return { type: \"UNHIGHLIGHT\" };\r\n}\r\n\r\nexport function move(newTile, piece) {\r\n  return { type: \"MOVE\", newTile, piece };\r\n}\r\n\r\nexport function win(didWhiteWin) {\r\n  return { type: \"WIN\", didWhiteWin };\r\n}\r\n\r\nexport function reset() {\r\n  return { type: \"RESET\" };\r\n}\r\n\r\nexport function sendPromote(tile, row) {\r\n  return { type: \"SENDPROMOTE\", tile, row };\r\n}\r\n\r\nexport function promote(piece) {\r\n  return { type: \"PROMOTE\", piece };\r\n}\r\n","// The board is represented as a 64 tile array\r\n// each entry is an integer representing the piece on the tile\r\n// 0 = blank tile 1,2 = King,Queen 3,4,5 = Rook,Bishop,Knight 6 = Pawn\r\n// Negative numbers mean the piece is black\r\nfunction initialBoard() {\r\n  const row0 = [-3, -4, -5, -2, -1, -5, -4, -3];\r\n  const row1 = new Array(8).fill(-6);\r\n  const row2to5 = new Array(32).fill(0);\r\n  const row6 = new Array(8).fill(6);\r\n  const row7 = [3, 4, 5, 2, 1, 5, 4, 3];\r\n  return row0.concat(row1, row2to5, row6, row7);\r\n}\r\n\r\nfunction getInitialState(WWins = 0, BWins = 0) {\r\n  return {\r\n    board: initialBoard(),\r\n    turn: true, // Whose turn is it? true = White false = Black\r\n    tileBg: new Array(64).fill(0), // The background color of each tile\r\n    // The tile holding the piece that the player wants to move\r\n    // The background color of the selected tile must be green\r\n    selectedTile: -1,\r\n    // The tiles that the selected piece can potentially move to\r\n    // The background colors of these tiles must be blue or red\r\n    // or the default color if the piece cannot move there because\r\n    // an ally piece is occupying it\r\n    highlightedTiles: [],\r\n    gameOver: false,\r\n    didWhiteWin: false,\r\n    // The tile position of the pawn to be promoted if there are any\r\n    promotedTile: -1,\r\n    // # of wins\r\n    whiteWins: WWins,\r\n    blackWins: BWins\r\n  };\r\n}\r\n\r\nfunction chessReducer(state = getInitialState(), action) {\r\n  if (action.type === \"UNHIGHLIGHT\" || action.type === \"MOVE\") {\r\n    if (action.type === \"MOVE\") {\r\n      // Move piece to new tile and clear out old tile\r\n      state.board[action.newTile] = state.board[state.selectedTile];\r\n      state.board[state.selectedTile] = 0;\r\n      state.turn = !state.turn;\r\n    }\r\n    // Unhighlight any highlighted tiles and reset values\r\n    state.tileBg[state.selectedTile] = 0;\r\n    state.highlightedTiles.forEach(tile => (state.tileBg[tile] = 0));\r\n    state.selectedTile = -1;\r\n    state.highlightedTiles = [];\r\n  } else if (action.type === \"HIGHLIGHT\") {\r\n    if (state.selectedTile !== -1) {\r\n      //Unhighlight previous highlighted tiles\r\n      state.tileBg[state.selectedTile] = 0;\r\n      state.highlightedTiles.forEach(tile => (state.tileBg[tile] = 0));\r\n    }\r\n    // Highlight the selected tile\r\n    state.selectedTile = action.tile;\r\n    state.tileBg[action.tile] = 1;\r\n    // Highlight any tiles that the piece can move to\r\n    state.highlightedTiles = getPossibleMoves(action.tile, action.piece, state.board);\r\n    state.highlightedTiles.forEach(tile => {\r\n      // determine the highlight color\r\n      state.tileBg[tile] = shouldHighlight(state.board[action.tile], state.board[tile]);\r\n    });\r\n  } else if (action.type === \"WIN\") {\r\n    state.gameOver = true;\r\n    state.didWhiteWin = action.didWhiteWin;\r\n    action.didWhiteWin ? state.whiteWins++ : state.blackWins++;\r\n  } else if (action.type === \"RESET\") {\r\n    state = getInitialState(state.whiteWins, state.blackWins);\r\n  } else if (action.type === \"SENDPROMOTE\") {\r\n    let piece = state.board[action.tile];\r\n    if ((piece === 6 && action.row === 0) || (piece === -6 && action.row === 7)) {\r\n      state.promotedTile = action.tile;\r\n    }\r\n  } else if (action.type === \"PROMOTE\") {\r\n    // Check whether the promoted piece should be black or white\r\n    let piece = state.promotedTile < 8 ? action.piece : action.piece * -1;\r\n    state.board[state.promotedTile] = piece;\r\n    state.promotedTile = -1;\r\n  }\r\n  return state;\r\n}\r\n\r\nfunction getPossibleMoves(tile, piece, board) {\r\n  let rows = [];\r\n  let cols = [];\r\n  // Pawn\r\n  switch (Math.abs(piece)) {\r\n    case 6:\r\n      let moves = [];\r\n      let multiplier = piece === -6 ? 1 : -1;\r\n      // First deal with forward movements\r\n      let possibleMoves = [multiplier];\r\n      // If pawn is on second or seventh row add extra move (initial position)\r\n      if (\r\n        (piece === 6 && Math.floor(tile / 8) === 6) ||\r\n        (piece === -6 && Math.floor(tile / 8) === 1)\r\n      ) {\r\n        possibleMoves.push(2 * multiplier);\r\n      }\r\n      // Push the move if there is an empty tile in front\r\n      for (let i = 0; i < possibleMoves.length; i++) {\r\n        if (\r\n          staysOn(tile, possibleMoves[i], 0) &&\r\n          shouldHighlight(piece, board[tile + 8 * possibleMoves[i]]) === 2\r\n        ) {\r\n          moves.push(tile + 8 * possibleMoves[i]);\r\n        } else {\r\n          break; // Break early because the Pawn is blocked from moving forward\r\n        }\r\n      }\r\n\r\n      // Now deal with diagonal movements\r\n      let diagonalOffsets = [-1, 1];\r\n      diagonalOffsets.forEach(offset => {\r\n        // Push the move if there is an enemy\r\n        if (\r\n          staysOn(tile, multiplier, offset) &&\r\n          shouldHighlight(piece, board[tile + 8 * multiplier + offset]) === 3\r\n        ) {\r\n          moves.push(tile + 8 * multiplier + offset);\r\n        }\r\n      });\r\n      return moves;\r\n\r\n    case 5:\r\n      rows = [-2, -2, -1, 1, 2, 2, 1, -1];\r\n      cols = [-1, 1, 2, 2, 1, -1, -2, -2];\r\n      return circlePath(tile, rows, cols);\r\n\r\n    case 4:\r\n      return diagonalPath(tile, piece, board);\r\n\r\n    case 3:\r\n      return straightPath(tile, piece, board);\r\n\r\n    case 2:\r\n      return straightPath(tile, piece, board).concat(diagonalPath(tile, piece, board));\r\n\r\n    case 1:\r\n      rows = [-1, -1, 0, 1, 1, 1, 0, -1, -1];\r\n      cols = [0, 1, 1, 1, 0, -1, -1, -1, -1];\r\n      return circlePath(tile, rows, cols);\r\n\r\n    default:\r\n      return [];\r\n  }\r\n}\r\n\r\n// Finds the relationship between the two pieces and returns an integer indicating what color should piece2 be highlighted as\r\n// 0 = Ally => No highlight\r\n// 2 = Neutral/Blank tile => Blue highlight\r\n// 3 = Enemy => Red highlight\r\nfunction shouldHighlight(piece1, piece2) {\r\n  let parity = piece1 * piece2;\r\n  return parity === 0 ? 2 : parity < 0 ? 3 : 0;\r\n}\r\n\r\n// Returns true if moving the tile by the given row and col adjustment will not cause the tile to fall off the board\r\nfunction staysOn(tile, row, col) {\r\n  let newRow = Math.floor(tile / 8) + row;\r\n  let newCol = (tile % 8) + col;\r\n  return newRow >= 0 && newRow < 8 && newCol >= 0 && newCol < 8;\r\n}\r\n\r\n// Used for the Rook and Queen\r\nfunction straightPath(tile, piece, board) {\r\n  let moves = [];\r\n  let multiplier = 1;\r\n  let row = 0;\r\n  let col = 0;\r\n  [8, -8, 1, -1].forEach(direction => {\r\n    multiplier = 1;\r\n    if (Math.abs(direction) === 8) {\r\n      row = direction / 8;\r\n      col = 0;\r\n    } else if (Math.abs(direction) === 1) {\r\n      row = 0;\r\n      col = direction;\r\n    }\r\n    while (staysOn(tile, row * multiplier, col * multiplier)) {\r\n      let highlight = shouldHighlight(piece, board[tile + direction * multiplier]);\r\n      // If ally is blocking path, don't add the move and stop moving in this direction\r\n      if (highlight === 0) {\r\n        break;\r\n      }\r\n      // Add the move and if enemy is blocking path, stop moving in this direction\r\n      moves.push(tile + direction * multiplier);\r\n      if (highlight === 3) {\r\n        break;\r\n      }\r\n      multiplier++;\r\n    }\r\n  });\r\n  return moves;\r\n}\r\n\r\n// Used for the Bishop and Queen\r\nfunction diagonalPath(tile, piece, board) {\r\n  let moves = [];\r\n  let multiplier = 1;\r\n  let rows = [-8, 8];\r\n  let cols = [-1, 1];\r\n  for (let i = 0; i < rows.length; i++) {\r\n    for (let j = 0; j < cols.length; j++) {\r\n      // rows[i] and cols[j] determine direction, multiplier determines how far to move\r\n      multiplier = 1;\r\n      // Advance in direction while we are on the board and nothing is blocking the path\r\n      while (staysOn(tile, (rows[i] / 8) * multiplier, cols[j] * multiplier)) {\r\n        let highlight = shouldHighlight(piece, board[tile + (rows[i] + cols[j]) * multiplier]);\r\n        // If ally is blocking path, don't add the move and stop moving in this direction\r\n        if (highlight === 0) {\r\n          break;\r\n        }\r\n        // Add the move and if enemy is blocking path, stop moving in this direction\r\n        moves.push(tile + (rows[i] + cols[j]) * multiplier);\r\n        if (highlight === 3) {\r\n          break;\r\n        }\r\n        multiplier++;\r\n      }\r\n    }\r\n  }\r\n  return moves;\r\n}\r\n\r\n// Used for the Knight and King\r\n// The rows and columns given simulate a circular path going clockwise from a zero degree bearing\r\nfunction circlePath(tile, rows, cols) {\r\n  let moves = [];\r\n  rows.forEach((row, index) => {\r\n    if (staysOn(tile, row, cols[index])) {\r\n      moves.push(tile + 8 * row + cols[index]);\r\n    }\r\n  });\r\n  return moves;\r\n}\r\n\r\nexport default chessReducer;\r\n","import { createStore } from \"redux\";\r\nimport chessReducer from \"./chessReducer\";\r\n\r\nlet store = createStore(chessReducer);\r\n\r\nexport default store;\r\n","import React from \"react\";\r\nimport Image from \"./Image\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { highlight, unHighlight, move, win, sendPromote } from \"../actions\";\r\nimport store from \"../store\";\r\n\r\nfunction handleClick(tile, piece, dispatch) {\r\n  let gameOver = store.getState(\"state\").gameOver;\r\n  if (!gameOver) {\r\n    let turn = store.getState(\"state\").turn;\r\n    if ((turn && piece > 0) || (!turn && piece < 0)) {\r\n      dispatch(highlight(tile, piece));\r\n      return;\r\n    }\r\n    let highlightedTiles = store.getState(\"state\").highlightedTiles;\r\n    let selectedTile = store.getState(\"state\").selectedTile;\r\n    // Check if the player selected a piece and the piece can move to the clicked tile\r\n    if (selectedTile !== -1 && highlightedTiles.find(htile => htile === tile) >= 0) {\r\n      // Check if the King died\r\n      dispatch(move(tile, piece));\r\n      if (Math.abs(piece) === 1) {\r\n        piece === 1 ? dispatch(win(false)) : dispatch(win(true));\r\n      }\r\n      // Check if the first or last row was reached to potentially promote a pawn\r\n      else {\r\n        let row = Math.floor(tile / 8);\r\n        if (row === 0 || row === 7) {\r\n          dispatch(sendPromote(tile, row));\r\n        }\r\n      }\r\n      return;\r\n    }\r\n    dispatch(unHighlight());\r\n  }\r\n}\r\n\r\nfunction Tile(props) {\r\n  const dispatch = useDispatch();\r\n  const name = useSelector(state => state.board[props.tile]);\r\n  const bg = useSelector(state => state.tileBg[props.tile]);\r\n  const style = {\r\n    backgroundColor: props.bg,\r\n    backgroundImage: \"none\"\r\n  };\r\n\r\n  if (bg === 1) {\r\n    style.backgroundColor = \"#90f694\";\r\n    style.backgroundImage = \"radial-gradient(lime, green)\";\r\n  } else if (bg === 2) {\r\n    style.backgroundColor = \"#5ba8e6\";\r\n    style.backgroundImage = \"radial-gradient(blue, darkblue)\";\r\n  } else if (bg === 3) {\r\n    style.backgroundColor = \"#db1010\";\r\n    style.backgroundImage = \"radial-gradient(red, darkred)\";\r\n  }\r\n  return (\r\n    <div style={style} className=\"tile\" onClick={() => handleClick(props.tile, name, dispatch)}>\r\n      <Image name={name} />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Tile;\r\n","import React from \"react\";\r\nimport Tile from \"./Tile\";\r\nimport { useSelector } from \"react-redux\";\r\n\r\nfunction getBg(index) {\r\n  return (Math.floor(index / 8) + (index % 8)) % 2;\r\n}\r\nconst backgrounds = [\"white\", \"black\"];\r\n\r\nfunction Board() {\r\n  const board = useSelector(state => state.board);\r\n  const tiles = board.map((piece, index) => (\r\n    <Tile key={index} tile={index} bg={backgrounds[getBg(index)]} />\r\n  ));\r\n  return <div id=\"board\">{tiles}</div>;\r\n}\r\n\r\nexport default Board;\r\n","import React from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\n\r\nconst modeMap = [\"White's Turn\", \"Black's Turn\", \"White Wins!\", \"Black Wins!\"];\r\nconst colorMap = [\"white\", \"black\"];\r\n\r\nfunction Title() {\r\n  let turn = useSelector(state => state.turn);\r\n  let gameOver = useSelector(state => state.gameOver);\r\n  let didWhiteWin = useSelector(state => state.didWhiteWin);\r\n  let index = turn ? 0 : 1;\r\n  if (gameOver) {\r\n    index = didWhiteWin ? 2 : 3;\r\n  }\r\n  return <h2 style={{ color: colorMap[index % 2] }}>{modeMap[index]}</h2>;\r\n}\r\n\r\nexport default Title;\r\n","import React from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\n\r\nfunction WhiteWins() {\r\n  let WWins = useSelector(state => state.whiteWins);\r\n  return <h2 style={{ color: \"white\" }}>White Wins: {WWins}</h2>;\r\n}\r\n\r\nexport default WhiteWins;\r\n","import React from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\n\r\nfunction BlackWins() {\r\n  let BWins = useSelector(state => state.blackWins);\r\n  return <h2 style={{ color: \"black\" }}>Black Wins: {BWins}</h2>;\r\n}\r\n\r\nexport default BlackWins;\r\n","import React from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { reset } from \"../actions\";\r\nimport Title from \"./Title\";\r\nimport WhiteWins from \"./WhiteWins\";\r\nimport BlackWins from \"./BlackWins\";\r\n\r\nfunction sendReset(dispatch) {\r\n  dispatch(reset());\r\n}\r\n\r\nfunction Header() {\r\n  const dispatch = useDispatch();\r\n  return (\r\n    <div id=\"header\">\r\n      <WhiteWins />\r\n      <Title />\r\n      <BlackWins />\r\n      <button id=\"reset\" onClick={() => sendReset(dispatch)}>\r\n        Reset\r\n      </button>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Header;\r\n","import React from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { promote } from \"../actions\";\r\nimport Image from \"./Image\";\r\n\r\nfunction sendPromote(event, dispatch) {\r\n  event.preventDefault();\r\n  dispatch(promote(Number(event.target.elements.promotion.value)));\r\n}\r\n\r\nfunction PromotionForm() {\r\n  const dispatch = useDispatch();\r\n  let promotedTile = useSelector(state => state.promotedTile);\r\n  if (promotedTile !== -1) {\r\n    let multiplier = promotedTile < 8 ? 1 : -1;\r\n    return (\r\n      <div className=\"modal\">\r\n        <div className=\"modal-wrapper\">\r\n          <form className=\"modal-content\" onSubmit={e => sendPromote(e, dispatch)}>\r\n            <h1>Pawn Promotion</h1>\r\n            <h2>Select a piece to promote your pawn to:</h2>\r\n            <div className=\"promotion-input\">\r\n              <Image name={multiplier * 2} />\r\n              <Image name={multiplier * 3} />\r\n              <Image name={multiplier * 4} />\r\n              <Image name={multiplier * 5} />\r\n              <label>Queen </label>\r\n              <label>Rook </label>\r\n              <label>Bishop </label>\r\n              <label>Knight</label>\r\n              <input type=\"radio\" value=\"2\" name=\"promotion\" required />\r\n              <input type=\"radio\" value=\"3\" name=\"promotion\" />\r\n              <input type=\"radio\" value=\"4\" name=\"promotion\" />\r\n              <input type=\"radio\" value=\"5\" name=\"promotion\" />\r\n              <input type=\"submit\" value=\"Promote\" />\r\n            </div>\r\n          </form>\r\n        </div>\r\n      </div>\r\n    );\r\n  } else {\r\n    return <React.Fragment></React.Fragment>;\r\n  }\r\n}\r\n\r\nexport default PromotionForm;\r\n","import React from \"react\";\nimport \"./main.css\";\nimport Board from \"./components/Board\";\nimport Header from \"./components/Header\";\nimport PromotionForm from \"./components/PromotionForm\";\n\nfunction App() {\n  return (\n    <div id=\"game-container\">\n      <Header />\n      <PromotionForm />\n      <Board />\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport { Provider } from \"react-redux\";\nimport store from \"./store\";\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}